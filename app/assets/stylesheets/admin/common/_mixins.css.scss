
/*=== Grid
==============================================================================================*/
@function column-width($n) {
	@if unit($grid-width) == "px" {
		@return floor($grid-width * $n / $grid-columns - $grid-gutter);
	}
	@else {
		@return calc(#{percentage($n / $grid-columns)} - #{$grid-gutter});
	}
}

@mixin row {
	@extend .clear-after;
	margin-left: -$grid-gutter;

	> * {
		float: left;
		margin-left: $grid-gutter;
	}
}

@mixin column($n) {
 	width: column-width($n);
}

@mixin column-classes($prefix: "col") {
	@for $n from 1 through $grid-columns {
		.#{$prefix}-#{$n} {
			@include column($n);
		}
	}
}


/*=== Basic
==============================================================================================*/
@mixin font($color: null, $size: null, $line: null) {
	@if $color {
		color: $color;
	}
	@if $size {
		font-size: $size;
	}
	@if $line {
		line-height: $line;
	}
}

@mixin spacing($margin: null, $padding: null) {
	@if $margin {
		margin: $margin;
	}
	@if $padding {
		padding: $padding;
	}
}

@mixin size($width: null, $height: null) {
	@if $width {
		width: $width;
	}
	@if $height {
		height: $height;
	}
}

@mixin truncate-line {
	white-space: nowrap;
	width: 100%;
	overflow: hidden;
	text-overflow: ellipsis;
}


/*=== Float
==============================================================================================*/
@mixin float($selector: ">*", $margin: null, $direction: left, $width: null) {
	@extend .clear-after;

	#{$selector} {
		margin-#{$direction}: $margin;
		display: block;
		float: $direction;

		&:first-child {
			margin-#{$direction}: 0;
		}

		@if length($width) < 2 {
			width: $width;
		}
		@else {
			$s: "&:first-child";

			@for $i from 1 through length($width) {
				@if $i > 1 {
					$s: $s + "+*";
				}
				#{$s} {
					width: nth($width, $i);
				}
			}
		}
	}
}


/*=== Arrow
==============================================================================================*/
@mixin arrow($side, $size, $color, $x: 0, $y: 0) {
	$side: opposite($side);

	display: block;
	position: absolute;
	@if $x != none {
		@if $side == left {
			margin-right: -$size;
			right: $x;
		}
		@else {
			margin-left: -$size;
			left: $x;
		}
	}
	@if $y != none {
		top: $y;
	}
	@include size(0, 0);
	border: $size solid transparent;
	border-#{$side}-color: $color;
}


/*=== Keyframes
==============================================================================================*/
@mixin keyframes($name) {
	@-webkit-keyframes #{$name} {
		@content;
	}
	@-moz-keyframes #{$name} {
		@content;
	}
	@-ms-keyframes #{$name} {
		@content;
	}
	@keyframes #{$name} {
		@content;
	}
}


/*=== Opposite
==============================================================================================*/
@function opposite($side) {
	$oppo: right;

	@if $side == top {
		$oppo: bottom;
	}
	@else if $side == right {
		$oppo: left;
	}
	@else if $side == bottom {
		$oppo: top;
	}

	@return $oppo;
}


/*=== Vertical Center
==============================================================================================*/
@mixin vm-box {
	&:before {
		content: "";
		height: 100%;
		width: 1px;
		margin-left: -1px;
		@include inline-block;
		vertical-align: middle;
	}
	> * {
		@include inline-block;
		vertical-align: middle;
	}
}


/*=== Popup Box Shadow
==============================================================================================*/
@mixin popup-box-shadow($add: none) {
	//$sh: 0 1px 6px rgba(#000, .35), 0 0 0 1px rgba(#000, .2);
	// $sh: 0 0 0 1px rgba(#000, .2), 0 6px 0 -3px rgba(#000, .1);
	$sh: 0 6px 0 -3px rgba(#000, .1);

	@if $add == none {
		@include box-shadow($sh);
	}
	@else {
		@include box-shadow($sh, $add);
	}
}


/*=== Animation
==============================================================================================*/
@mixin popup-animation(
	$el: "&",
	$selector: ".show &",
	$duration: .3s,
	$scale: .98,
	$y: 15px,
	$rotate: -3deg,
	$opacity: true
) {
	#{$el} {
		visibility: hidden;
		@if $opacity {
			opacity: 0;
		}
		@include transform(scale($scale) translateY($y) perspective(400px) rotateX($rotate));
		@include transition(all #{$duration} $funcy-easing, visibility 0s #{$duration});
		@include transform-origin(50% 0 0);
	}

	#{$selector} {
		visibility: visible;
		@if $opacity {
			opacity: 1;
		}
		@include transform(scale(1) translateY(0px) perspective(400px) rotateX(0deg));
		@include transition-delay(0s);
	}
}


/*=== Loading Cube
==============================================================================================*/
@mixin loading-cube($theme: 'mono') {
	display: block;
	position: absolute;
	top: 50%;
	left: 50%;
	width: 10px;
	height: 10px;
	background: transparent;
	@include transition(box-shadow .1s);
	@include experimental(animation, loading-cude-#{$theme} 1s linear infinite);
	z-index: 2000;
}

$loading-cude-themes:
	mono $header-bg-color,
	primary $primary-color;

@each $lct in $loading-cude-themes {
	$name: nth($lct, 1);
	$color: nth($lct, 2);

	$c1: rgba($color, .4);
	$c2: rgba($color, .5);
	$c3: rgba($color, .6);
	$c4: rgba($color, .7);

	@include keyframes(loading-cude-#{$name}) {
		25% {
			@include box-shadow(
				inset 0 0 0 10px $c2,
				-10px 0 0 $c3,
				-10px -10px 0 $c4,
				0 -10px 0 $c1
			);
		}
		50% {
			@include box-shadow(
				inset 0 0 0 10px $c1,
				-10px 0 0 $c2,
				-10px -10px 0 $c3,
				0 -10px 0 $c4
			);
		}
		75% {
			@include box-shadow(
				inset 0 0 0 10px $c4,
				-10px 0 0 $c1,
				-10px -10px 0 $c2,
				0 -10px 0 $c3
			);
		}
		0%, 100% {
			@include box-shadow(
				inset 0 0 0 10px $c3,
				-10px 0 0 $c4,
				-10px -10px 0 $c1,
				0 -10px 0 $c2
			);
		}
	}

}


/*=== Scroll Bar
==============================================================================================*/
@mixin webkit-scrollbar {
	&::-webkit-scrollbar {
		height: 8px;
		width: 3px;
	}

	&::-webkit-scrollbar-track {
		background: rgba(#000, .1);
	}

	&::-webkit-scrollbar-thumb {
		background: rgba(#000, .3);
	}

	&::-webkit-scrollbar-thumb:window-inactive {
		background: rgba(#000, .1);
	}
}

